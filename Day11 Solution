//html

<!DOCTYPE html>
<html>
  <head>
    <title>Vanilla Challenge</title>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="src/style.css" />
  </head>

  <body>
    <button>Give me color</button>
    <script src="src/index.js"></script>
  </body>
</html>





//css

body {
  height: 100vh;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}

button {
  font-size: 20px;
}





//js

const colors = [
  "#ef5777",
  "#575fcf",
  "#4bcffa",
  "#34e7e4",
  "#0be881",
  "#f53b57",
  "#3c40c6",
  "#0fbcf9",
  "#00d8d6",
  "#05c46b",
  "#ffc048",
  "#ffdd59",
  "#ff5e57",
  "#d2dae2",
  "#485460",
  "#ffa801",
  "#ffd32a",
  "#ff3f34"
];

//btn태그를 js에서 사용할 수 있도록 선언
const btn = document.querySelector("button");

function handleClick() {

  //colors 배열에서 색상을 선택하기 위한 코드! 현재colors.length는 18
  //색상을 랜덤으로 선택하기 위해 Math.random()함수를 사용
  //colors.length을 최댓값으로 사용해 Math.random() * colors.length으로 작성하면 0~17까지의 난수를 얻을 수 있다.
  //(Math.random()함수의 범위에 1이 포함되지 않아 18을 얻을 수 없음)
  //Math.random()함수는 부동소수점을 반환하기 때문에 소수점이 존재한다. Math.floor()함수를 사용해 소수점을 없애 주기
  //두 가지 색상을 선택해야 하므로 선택된 색상을 각각 변수 a와 b로 선언
  const a = colors[Math.floor(Math.random() * colors.length)];
  const b = colors[Math.floor(Math.random() * colors.length)];
  
  //선택된 두 가지 색상이 겹치는 것을 방지하기 위한 코드
  //변수 a와b가 동일할 경우 handleClick함수를 다시 실행한다.
  //이렇게 함수 내부에 자기 자신을 호출하는 함수를 재귀 함수라 한다. 
  if (a === b) {
    return handleClick();
  }
  
  //최종적으로 선택된 두 가지 색상을 사용해 body태그의 배경을 linear-gradient로 바꿔준다.
  //body의 style객체의 background프로퍼티를 이용
  //`linear-gradient(to left, ${a}, ${b})`는 템플릿 리터럴이라고 하는 문자열 표기법이다.
  document.body.style.background = `linear-gradient(to left, ${a}, ${b})`;
}


//작성한 함수를 사용해 이벤트 핸들러를 등록
//btn에 click이벤트가 발생할 때 handleClick함수가 실행되어야 .
btn.addEventListener("click", handleClick);
